{"version":3,"sources":["Components/Square/Square.js","Components/Description/Description.js","Components/Animate/animate.js","Components/Algorithms/BFS.js","Components/Header/Header.js","Components/Algorithms/DFS.js","Components/Algorithms/Dijikstra.js","Components/Algorithms/Astar.js","Components/Visualiser/Visualiser.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","colorFill","i","j","start","end","grid","i1","j1","i2","j2","styleClass","backgroundColor","this","id","style","display","gridTemplateColumns","cols","map","rows","row","col","key","className","ref","myRef","onClick","clickHandler","onMouseMove","MouseMove","onMouseUp","MouseUp","onMouseDown","MouseDown","Component","Description","animateCell","cell","type","refArray","speed","a","Promise","resolve","reject","setTimeout","x","y","classList","add","Bfs","console","log","queue","Queue","st","en","matrixRows","length","matrixColumns","visited","shortestPath","pathExists","push","Array","from","Number","enqueue","isEmpty","current","peek","dequeue","neighbours","getNeighbours","r","c","temp","n1","n2","totalRows","totalCols","algoToImpletment","Speed","header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","NavDropdown","marginLeft","title","Item","Link","execute","clearAnimation","clearBlocks","clearPath","result","Dfs","pathArray","dfsHelper","pathPaint","isVisited","up","down","right","left","d","l","pop","pathArr","minHeap","heap","clear","getMin","min","siftDown","item","siftUp","parent","index","Math","floor","children","leftChildValid","rightChildValid","newIndex","val","Dijikstra","distance","POSITIVE_INFINITY","neighbors","k","m","n","newDistance","Astar","cost","newCost","abs","mouseClickedStart","mouseClickedEnd","isWallClicked","visualizer","isWall","refs","state","myRefs","contains","remove","intitalizeGrid","e","target","getAttribute","startPos","endPos","gridState","setState","endNode","beginNode","algo","clearBoard","clearWall","AStar","bind","initialStart","initialEnd","initialState","newGrid","refGrid","Fragment","Header","moveHandler","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b6e865c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './square.css';\r\n\r\nclass Square extends Component{\r\n\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    \r\n  }\r\n  colorFill = (i , j ) =>{\r\n   \r\n    \r\n    let start = this.props.start;\r\n    let end = this.props.end;\r\n    let grid = this.props.grid;\r\n    let i1 = start[0];\r\n    let j1 = start[1];\r\n    let i2 = end[0];\r\n    let j2 = end[1];\r\n   let styleClass = {\r\n      backgroundColor : '',\r\n    }\r\n    if(i == i1 && j == j1) {\r\n      styleClass.backgroundColor = 'yellow';\r\n      \r\n    }\r\n    if(i == i2 && j == j2) styleClass.backgroundColor = 'lawnGreen';\r\n    if(grid[i][j] == -1) styleClass.backgroundColor = 'black'\r\n    return styleClass;\r\n   }\r\n \r\n    render(){ \r\n    let grid = this.props.grid;\r\n    \r\n    return(\r\n      <div id = \"Square\" style = {{\r\n      display : 'grid',\r\n      gridTemplateColumns : `repeat(${this.props.cols} , 30px)`\r\n      }}>\r\n      {\r\n        grid.map((rows , i) =>\r\n        rows.map((cols , j) =>{\r\n          let style = this.colorFill(i , j);\r\n          return <div\r\n                   row = {i} col = {j} \r\n                   key = {`${i}-${j}`} \r\n                  className = \"Square\" \r\n                  ref = {(ref) =>{\r\n                    \r\n                    this.props.myRef[i][j] = ref;\r\n                    \r\n                   }}\r\n                   style = {style}\r\n                   onClick = {this.props.clickHandler} \r\n                   onMouseMove = {this.props.MouseMove}\r\n                   onMouseUp = {this.props.MouseUp}\r\n                   onMouseDown = {this.props.MouseDown}>\r\n                  </div>\r\n        })\r\n      )\r\n      } </div>    \r\n      \r\n)\r\n}\r\n  \r\n}\r\nexport default Square;\r\n","import React from 'react';\r\nimport '../Description/description.css';\r\nconst Description = () =>{\r\n\r\n         return(\r\n        <div className = \"row\">\r\n            <div className= \"block start\"></div>\r\n            <div>Start Node</div>\r\n            <div className= \"block end\"></div>\r\n            <div>End Node</div>\r\n            <div className= \"block visited\"></div>\r\n            <div>Visited Node</div>\r\n            <div className= \"block path\"></div>\r\n            <div>Path Node</div>\r\n            <div className=\"block wall\"></div>\r\n            <div>Wall</div>\r\n        </div>\r\n        )\r\n  \r\n}\r\n\r\nexport default Description;","import React from 'react';\r\nimport './animate.css'\r\nconst  animateCell = async (cell , type , refArray , speed) =>{\r\n\r\n   return new Promise(function(resolve, reject) {\r\n    setTimeout(() =>{\r\n        \r\n        refArray[cell.x][cell.y].classList.add('animation_trigger');\r\n        if(type == \"Path Node\"){\r\n           refArray[cell.x][cell.y].classList.add('color_path');\r\n        }\r\n        resolve(\"Painted\");\r\n        \r\n    },speed);\r\n    \r\n    });\r\n    \r\n    \r\n}\r\n\r\nexport default animateCell;","//import React from 'react';\r\nimport Queue from 'queue-fifo';\r\nimport animateCell from '../Animate/animate';\r\nconst Bfs = async(props , start , end , refArray , speed)=>{\r\n        \r\n    console.log(\"fghfgh\");\r\n    let queue = new Queue();\r\n    let st = {x : start[0] , y : start[1]};\r\n    let en = {x : end[0] , y : end[1]};\r\n    let grid = props;\r\n    let matrixRows = grid.length;\r\n    let matrixColumns = grid[0].length;\r\n    let visited = [];\r\n    let shortestPath = [];\r\n    let pathExists = false;\r\n    for(let i = 0 ; i < matrixRows ; i++){\r\n        visited.push(Array.from(Array(matrixColumns) , () => false));\r\n        shortestPath[i] = new Array(matrixColumns);\r\n       // shortestPath.push(Array.from(Array(matrixColumns) , () => false));\r\n    }\r\n    for(let i = 0 ; i < matrixRows ; i++){\r\n        for(let j = 0 ; j < matrixColumns ; j++){\r\n            shortestPath[i][j] = false;\r\n        }\r\n    }\r\n    \r\n    visited[Number(st.x)][Number(st.y)] = true;\r\n    ;\r\n    await animateCell(st , \"start\" , refArray , speed); \r\n    queue.enqueue(st);\r\n    \r\n    while(!queue.isEmpty())\r\n    {\r\n        \r\n        let current = queue.peek();\r\n        queue.dequeue();\r\n        if(current.x === en.x && current.y === en.y) {\r\n            console.log(\"End\");\r\n            pathExists = true;\r\n            break;\r\n        }\r\n        let neighbours = getNeighbours(current.x , current.y , matrixRows , matrixColumns);\r\n        for( let i = 0 ; i < neighbours.length ; i++)\r\n        {\r\n                let r = Number(neighbours[i][0]);\r\n                let c = Number(neighbours[i][1]);\r\n\r\n                if(visited[r][c] || grid[r][c] === -1) continue;\r\n                visited[r][c] = true;\r\n                shortestPath[r][c] = [Number(current.x) , Number(current.y)];\r\n                let temp = { x : r , y : c};\r\n                await animateCell(temp , \"Interm\" , refArray , speed);\r\n                if(en.x == r && en.y == c){\r\n                    pathExists = true;\r\n                    break;\r\n                }\r\n                queue.enqueue(temp);\r\n        }\r\n        if(pathExists) break;\r\n    }\r\n    if(pathExists)\r\n    {\r\n        let r = Number(en.x) , c = Number(en.y);\r\n        let temp;\r\n        let n1 , n2;\r\n        \r\n       while(shortestPath[r][c] !== false){\r\n            temp = { x : r , y : c};\r\n            await animateCell(temp , \"Path Node\" , refArray , speed);\r\n            n1  = shortestPath[r][c][0];\r\n            n2 = shortestPath[r][c][1];\r\n            r = n1;\r\n            c = n2;\r\n        }\r\n            \r\n            temp = {x : r , y : c};\r\n            await animateCell(temp , \"Path Node\" ,refArray , speed)\r\n        }\r\n}\r\nconst getNeighbours = (i , j , totalRows , totalCols) =>{\r\n    \r\n    let neighbours = [];\r\n    if ( i > 0 ){ neighbours.push( [i - 1, j] );}\r\n\tif ( j > 0 ){ neighbours.push( [i, j - 1] );}\r\n\tif ( i < (totalRows - 1) ){ neighbours.push( [i + 1, j] );}\r\n\tif ( j < (totalCols - 1) ){ neighbours.push( [i, j + 1] );}\r\n\treturn neighbours;\r\n}\r\nexport default Bfs;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '../Header/header.css';\r\nimport {Nav ,Navbar, NavDropdown} from 'react-bootstrap'\r\nlet algoToImpletment = \"Default\";\r\nlet Speed = 5;\r\nlet ClearBoard = false;\r\nlet ClearWall = false;\r\n\r\nconst header = (props) =>{\r\n    \r\n    return(\r\n        <div className = \"header\">\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" >\r\n        <Navbar.Brand href=\"#home\">Algorithm Visualizer</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n         <Nav className=\"mr-auto\">\r\n             <NavDropdown style ={{marginLeft : 50}}title=\"Algorithms\" id=\"collasible-nav-dropdown\">\r\n                <NavDropdown.Item  onClick ={()=>algoToImpletment = \"Bfs\"}>Breadth First Search Algorithm</NavDropdown.Item>\r\n                <NavDropdown.Item  onClick ={()=>algoToImpletment = \"Dfs\"}> Depth First Search Algorithm</NavDropdown.Item>\r\n                <NavDropdown.Item  onClick ={()=>algoToImpletment = \"Dijikstra\"}>Dijikstra Algorithm</NavDropdown.Item>\r\n                <NavDropdown.Item  onClick ={()=>algoToImpletment = \"A*\"}>A* Search Algorithm</NavDropdown.Item>\r\n            </NavDropdown>\r\n        \r\n            <NavDropdown style ={{marginLeft : 80}} title=\"Speed\" id=\"collasible-nav-dropdown\">\r\n                <NavDropdown.Item onClick = {() => Speed = 5}>Fast</NavDropdown.Item>\r\n                 <NavDropdown.Item onClick = {() => Speed = 20}>Medium</NavDropdown.Item>\r\n                 <NavDropdown.Item onClick = {() => Speed = 50}>Slow</NavDropdown.Item>\r\n            </NavDropdown>\r\n\r\n            <Nav.Link style ={{marginLeft : 100}} onClick ={()=>props.execute(algoToImpletment , Speed , ClearBoard ,ClearWall)}>Visualize</Nav.Link>\r\n\r\n            <Nav.Link style ={{marginLeft : 100}} onClick = {()=>{props.clearAnimation(true)}}>Clear Board</Nav.Link>\r\n\r\n            <Nav.Link style ={{marginLeft : 100}} onClick = {()=>{props.clearBlocks()}}>Clear Walls</Nav.Link>\r\n\r\n            <Nav.Link style ={{marginLeft : 100}} onClick = {()=>{props.clearPath()}}>Clear Path</Nav.Link>\r\n         </Nav>\r\n        </Navbar.Collapse>\r\n        </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default header;","import animateCell from '../Animate/animate';\r\nlet result = [];\r\nconst Dfs = async(props , start , end , refArray , speed) =>{\r\n\r\n    let st = {x : start[0] , y : start[1]};\r\n    let en = {x : end[0] , y : end[1]};\r\n    let grid = props;\r\n    let matrixRows = grid.length;\r\n    let matrixColumns = grid[0].length;\r\n    let visited = [];\r\n    let shortestPath = [];\r\n    let pathExists = false;\r\n    for(let i = 0 ; i < matrixRows ; i++){\r\n        visited.push(Array.from(Array(matrixColumns) , () => false));\r\n        shortestPath[i] = new Array(matrixColumns);\r\n    }\r\n    for(let i = 0 ; i < matrixRows ; i++){\r\n        for(let j = 0 ; j < matrixColumns ; j++){\r\n            shortestPath[i][j] = false;\r\n        }\r\n    }\r\n    let pathArray = [];\r\n    let isVisited = false;\r\n    \r\n   await dfsHelper(grid , visited , st , en , pathArray , isVisited , refArray ,speed , matrixRows , matrixColumns);\r\n    await pathPaint(result , refArray , speed);\r\n    \r\n}\r\nconst dfsHelper = async (grid , visited , st , en , pathArray , isVisited , refArray , speed , matrixRows , matrixColumns) =>{\r\n\r\n        if(st.x < 0 || st.x >= matrixRows || st.y < 0 || st.y >= matrixColumns) return false;\r\n    \r\n        if(st.x == en.x && st.y == en.y)\r\n        {\r\n            console.log(\"Reached End\" , st ,en);\r\n            isVisited = true;\r\n            result = pathArray;\r\n            return true;\r\n        }\r\n        let i = st.x , j = st.y;\r\n        if(grid[i][j] === -1 || visited[i][j]) return false;\r\n        visited[i][j] = true;\r\n\r\n        let temp = { x : i , y : j};\r\n        await animateCell(temp , \"Interm\" , refArray , speed);\r\n        let up = {x : i - 1 , y : j};\r\n        let down = {x : i + 1 , y : j};\r\n        let right = {x : i , y : j + 1};\r\n        let left = {x : i , y : j -  1};\r\n        let u  , d , r , l;\r\n        pathArray.push([i , j]);\r\n        u = await dfsHelper(grid , visited , up ,en ,pathArray , isVisited , refArray ,speed , matrixRows , matrixColumns);\r\n        \r\n        if(!u){\r\n           \r\n            \r\n            d = await dfsHelper(grid , visited , down ,en ,pathArray , isVisited , refArray , speed , matrixRows , matrixColumns);\r\n            \r\n        }\r\n        else return true;\r\n        if(!d) {\r\n            r = await dfsHelper(grid , visited , right ,en ,pathArray , isVisited , refArray , speed , matrixRows , matrixColumns);\r\n          \r\n        }\r\n        else return true;\r\n        if(!r){ \r\n            l = await dfsHelper(grid , visited , left ,en ,pathArray , isVisited , refArray , speed , matrixRows , matrixColumns);\r\n                \r\n        }\r\n        else return true;\r\n        if(!l)\r\n        {\r\n            pathArray.pop();\r\n            return false;\r\n        }\r\n        return true;\r\n}\r\nconst pathPaint =async (pathArr , refArray , speed) =>{\r\n\r\n   console.log(pathArr);\r\n     for(let i = 0 ; i < pathArr.length ; i++)\r\n    {\r\n        console.log(pathArr[i]);\r\n        let r = pathArr[i][0];\r\n        let c = pathArr[i][1];\r\n        let temp = {x : r , y : c};\r\n        await animateCell(temp , \"Path Node\" , refArray , speed);\r\n    }\r\n    return;\r\n}\r\nexport default Dfs;","import animateCell from '../Animate/animate';\r\n\r\nfunction minHeap() {\r\n\tthis.heap = [];\r\n\tthis.isEmpty = function(){\r\n\t\treturn (this.heap.length == 0);\r\n\t}\r\n\tthis.clear = function(){\r\n\t\tthis.heap = [];\r\n\t\treturn;\r\n\t}\r\n\tthis.getMin = function(){\r\n\t\tif (this.isEmpty()){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar min = this.heap[0];\r\n\t\tthis.heap[0] = this.heap[this.heap.length - 1];\r\n\t\tthis.heap[this.heap.length - 1] = min;\r\n\t\tthis.heap.pop();\r\n\t\tif (!this.isEmpty()){\r\n\t\t\tthis.siftDown(0);\r\n\t\t}\r\n\t\treturn min;\r\n\t}\r\n\tthis.push = function(item){\r\n\t\tthis.heap.push(item);\r\n\t\tthis.siftUp(this.heap.length - 1);\r\n\t\treturn;\r\n\t}\r\n\tthis.parent = function(index){\r\n\t\tif (index == 0){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn Math.floor((index - 1) / 2);\r\n\t}\r\n\tthis.children = function(index){\r\n\t\treturn [(index * 2) + 1, (index * 2) + 2];\r\n\t}\r\n\tthis.siftDown = function(index){\r\n\t\tvar children = this.children(index);\r\n\t\tvar leftChildValid = (children[0] <= (this.heap.length - 1));\r\n\t\tvar rightChildValid = (children[1] <= (this.heap.length - 1));\r\n\t\tvar newIndex = index;\r\n\t\tif (leftChildValid && this.heap[newIndex][0] > this.heap[children[0]][0]){\r\n\t\t\tnewIndex = children[0];\r\n\t\t}\r\n\t\tif (rightChildValid && this.heap[newIndex][0] > this.heap[children[1]][0]){\r\n\t\t\tnewIndex = children[1];\r\n\t\t}\r\n\t\t// No sifting down needed\r\n\t\tif (newIndex === index){ return; }\r\n\t\tvar val = this.heap[index];\r\n\t\tthis.heap[index] = this.heap[newIndex];\r\n\t\tthis.heap[newIndex] = val;\r\n\t\tthis.siftDown(newIndex);\r\n\t\treturn;\r\n\t}\r\n\tthis.siftUp = function(index){\r\n\t\tvar parent = this.parent(index);\r\n\t\tif (parent !== null && this.heap[index][0] < this.heap[parent][0]){\r\n\t\t\tvar val = this.heap[index];\r\n\t\t\tthis.heap[index] = this.heap[parent];\r\n\t\t\tthis.heap[parent] = val;\r\n\t\t\tthis.siftUp(parent);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n}\r\n\r\nconst Dijikstra = async(props , start , end , refArray , speed) =>{\r\n\r\n    let heap = new minHeap();\r\n    let st = {x : start[0] , y : start[1]};\r\n    let en = {x : end[0] , y : end[1]};\r\n    let grid = props;\r\n    let matrixRows = grid.length;\r\n    let matrixColumns = grid[0].length;\r\n    let visited = [];\r\n    let shortestPath = [];\r\n    let pathExists = false;\r\n    let distance = [];\r\n    for(let i = 0 ; i < matrixRows ; i++){\r\n        visited.push(Array.from(Array(matrixColumns) , () => false));\r\n        shortestPath[i] = new Array(matrixColumns);\r\n        distance[i] = new Array(matrixColumns);\r\n    }\r\n    for(let i = 0 ; i < matrixRows ; i++){\r\n        for(let j = 0 ; j < matrixColumns ; j++){\r\n            shortestPath[i][j] = false;\r\n            distance[i][j] = Number.POSITIVE_INFINITY;\r\n        }\r\n    }\r\n    distance[st.x][st.y] = 0;\r\n    heap.push([ 0 , [st.x , st.y]]);\r\n    while(!heap.isEmpty()){\r\n\r\n        var cell = heap.getMin();\r\n\t\tvar i = cell[1][0];\r\n        var j = cell[1][1];\r\n        if (visited[i][j]){ continue; }\r\n\t\tvisited[i][j] = true;\r\n\t\tif (i == en.x && j == en.y){\r\n\t\t\tpathExists = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tvar neighbors = getNeighbours(i, j , matrixRows , matrixColumns);\r\n        console.log(neighbors);\r\n        for (var k = 0; k < neighbors.length; k++){\r\n\t\t\tvar m = neighbors[k][0];\r\n\t\t\tvar n = neighbors[k][1];\r\n\t\t\tif (visited[m][n] || grid[m][n] == -1){ continue; }\r\n\t\t\tvar newDistance = distance[i][j] + 1;\r\n\t\t\tif (newDistance < distance[m][n]){\r\n\t\t\t\tdistance[m][n] = newDistance;\r\n\t\t\t\tshortestPath[m][n] = [i, j];\r\n\t\t\t\theap.push([newDistance, [m, n]]);\r\n                let temp = {x : m , y : n};\r\n                await animateCell(temp , \"Interm\" , refArray , speed);\r\n\t\t\t}\r\n        }\r\n    }\r\n    if(pathExists){\r\n\r\n        let r = Number(en.x) , c = Number(en.y);\r\n        let temp;\r\n        let n1 , n2;\r\n        \r\n       while(shortestPath[r][c] !== false){\r\n            temp = { x : r , y : c};\r\n            await animateCell(temp , \"Path Node\" , refArray , speed);\r\n            n1  = shortestPath[r][c][0];\r\n            n2 = shortestPath[r][c][1];\r\n            r = n1;\r\n            c = n2;\r\n        }\r\n            \r\n            temp = {x : r , y : c};\r\n            await animateCell(temp , \"Path Node\" ,refArray , speed)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\nconst getNeighbours = (i , j , totalRows , totalCols) =>{\r\n    \r\n    let neighbours = [];\r\n    if ( i > 0 ){ neighbours.push( [i - 1, j] );}\r\n\tif ( j > 0 ){ neighbours.push( [i, j - 1] );}\r\n\tif ( i < (totalRows - 1) ){ neighbours.push( [i + 1, j] );}\r\n\tif ( j < (totalCols - 1) ){ neighbours.push( [i, j + 1] );}\r\n\treturn neighbours;\r\n}\r\nexport default Dijikstra;\r\n","import React from 'react';\r\nimport animateCell from '../Animate/animate';\r\nfunction minHeap() {\r\n\tthis.heap = [];\r\n\tthis.isEmpty = function(){\r\n\t\treturn (this.heap.length == 0);\r\n\t}\r\n\tthis.clear = function(){\r\n\t\tthis.heap = [];\r\n\t\treturn;\r\n\t}\r\n\tthis.getMin = function(){\r\n\t\tif (this.isEmpty()){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar min = this.heap[0];\r\n\t\tthis.heap[0] = this.heap[this.heap.length - 1];\r\n\t\tthis.heap[this.heap.length - 1] = min;\r\n\t\tthis.heap.pop();\r\n\t\tif (!this.isEmpty()){\r\n\t\t\tthis.siftDown(0);\r\n\t\t}\r\n\t\treturn min;\r\n\t}\r\n\tthis.push = function(item){\r\n\t\tthis.heap.push(item);\r\n\t\tthis.siftUp(this.heap.length - 1);\r\n\t\treturn;\r\n\t}\r\n\tthis.parent = function(index){\r\n\t\tif (index == 0){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn Math.floor((index - 1) / 2);\r\n\t}\r\n\tthis.children = function(index){\r\n\t\treturn [(index * 2) + 1, (index * 2) + 2];\r\n\t}\r\n\tthis.siftDown = function(index){\r\n\t\tvar children = this.children(index);\r\n\t\tvar leftChildValid = (children[0] <= (this.heap.length - 1));\r\n\t\tvar rightChildValid = (children[1] <= (this.heap.length - 1));\r\n\t\tvar newIndex = index;\r\n\t\tif (leftChildValid && this.heap[newIndex][0] > this.heap[children[0]][0]){\r\n\t\t\tnewIndex = children[0];\r\n\t\t}\r\n\t\tif (rightChildValid && this.heap[newIndex][0] > this.heap[children[1]][0]){\r\n\t\t\tnewIndex = children[1];\r\n\t\t}\r\n\t\t// No sifting down needed\r\n\t\tif (newIndex === index){ return; }\r\n\t\tvar val = this.heap[index];\r\n\t\tthis.heap[index] = this.heap[newIndex];\r\n\t\tthis.heap[newIndex] = val;\r\n\t\tthis.siftDown(newIndex);\r\n\t\treturn;\r\n\t}\r\n\tthis.siftUp = function(index){\r\n\t\tvar parent = this.parent(index);\r\n\t\tif (parent !== null && this.heap[index][0] < this.heap[parent][0]){\r\n\t\t\tvar val = this.heap[index];\r\n\t\t\tthis.heap[index] = this.heap[parent];\r\n\t\t\tthis.heap[parent] = val;\r\n\t\t\tthis.siftUp(parent);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n}\r\n\r\nconst Astar = async(props , start , end , refArray , speed) =>{\r\n    \r\n    let heap = new minHeap();\r\n    let st = {x : start[0] , y : start[1]};\r\n    let en = {x : end[0] , y : end[1]};\r\n    let grid = props;\r\n    let matrixRows = grid.length;\r\n    let matrixColumns = grid[0].length;\r\n    let visited = [];\r\n    let shortestPath = [];\r\n    let cost = [];\r\n    let pathExists = false;\r\n    let distance = [];\r\n    for(let i = 0 ; i < matrixRows ; i++){\r\n        visited.push(Array.from(Array(matrixColumns) , () => false));\r\n        shortestPath[i] = new Array(matrixColumns);\r\n        distance[i] = new Array(matrixColumns);\r\n        cost[i] = new Array(matrixColumns);\r\n    }\r\n    for(let i = 0 ; i < matrixRows ; i++){\r\n        for(let j = 0 ; j < matrixColumns ; j++){\r\n            shortestPath[i][j] = false;\r\n            distance[i][j] = Number.POSITIVE_INFINITY;\r\n            cost[i][j] = Number.POSITIVE_INFINITY;\r\n        }\r\n    }\r\n    distance[st.x][st.y] = 0;\r\n    heap.push([ 0 , [st.x , st.y]]);\r\n    while(!heap.isEmpty()){\r\n        var cell = heap.getMin();\r\n\t\tvar i = cell[1][0];\r\n        var j = cell[1][1];\r\n        if (visited[i][j]){ continue; }\r\n\t\tvisited[i][j] = true;\r\n\t\tif (i == en.x && j == en.y){\r\n\t\t\tpathExists = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n        var neighbors = getNeighbours(i, j , matrixRows , matrixColumns);\r\n        for (var k = 0; k < neighbors.length; k++){\r\n\t\t\tvar m = neighbors[k][0];\r\n\t\t\tvar n = neighbors[k][1];\r\n\t\t\tif (visited[m][n] || grid[m][n] == -1){ continue; }\r\n\t\t\tvar newDistance = distance[i][j] + 1;\r\n\t\t\tif (newDistance < distance[m][n]){\r\n\t\t\t\tdistance[m][n] = newDistance;\r\n\t\t\t\tshortestPath[m][n] = [i, j];\r\n\t\t\t\tlet temp = {x : m , y : n};\r\n                await animateCell(temp , \"Interm\" , refArray , speed);\r\n            }\r\n            var newCost = distance[i][j] + Math.abs(en.x - m) + Math.abs(en.y- n);\r\n\t\t\tif (newCost < cost[m][n]){\r\n\t\t\t\tcost[m][n] = newCost;\r\n\t\t\t\theap.push([newCost, [m, n]]);\r\n\t\t\t}\r\n        }\r\n    }\r\n    if(pathExists){\r\n\r\n        let r = Number(en.x) , c = Number(en.y);\r\n        let temp;\r\n        let n1 , n2;\r\n        \r\n       while(shortestPath[r][c] !== false){\r\n            temp = { x : r , y : c};\r\n            await animateCell(temp , \"Path Node\" , refArray , speed);\r\n            n1  = shortestPath[r][c][0];\r\n            n2 = shortestPath[r][c][1];\r\n            r = n1;\r\n            c = n2;\r\n        }\r\n            \r\n            temp = {x : r , y : c};\r\n            await animateCell(temp , \"Path Node\" ,refArray , speed)\r\n        }\r\n}\r\nconst getNeighbours = (i , j , totalRows , totalCols) =>{\r\n    \r\n    let neighbours = [];\r\n    if ( i > 0 ){ neighbours.push( [i - 1, j] );}\r\n\tif ( j > 0 ){ neighbours.push( [i, j - 1] );}\r\n\tif ( i < (totalRows - 1) ){ neighbours.push( [i + 1, j] );}\r\n\tif ( j < (totalCols - 1) ){ neighbours.push( [i, j + 1] );}\r\n\treturn neighbours;\r\n}\r\nexport default Astar;","import React , {Component, Fragment} from 'react';\r\nimport './visualiser.css';\r\nimport Square from '../Square/Square';\r\nimport Description from '../Description/Description'\r\nimport Bfs from '../Algorithms/BFS';\r\nimport Header from '../Header/Header';\r\nimport Dfs from '../Algorithms/DFS';\r\nimport Dijikstra from '../Algorithms/Dijikstra';\r\nimport AStar from '../Algorithms/Astar';\r\nlet mouseClickedStart = false;\r\nlet mouseClickedEnd = false;\r\nlet isWallClicked = false;\r\nclass visualizer extends Component{\r\n\r\n      constructor(props){\r\n         \r\n         super(props);\r\n         this.clickHandler = this.clickHandler.bind(this);\r\n         this.MouseUp = this.MouseUp.bind(this);\r\n         this.MouseDown = this.MouseDown.bind(this);\r\n         this.MouseMove = this.MouseMove.bind(this);\r\n         this.execute = this.execute.bind(this);\r\n         this.clearBlocks = this.clearBlocks.bind(this);\r\n         this.clearAnimation = this.clearAnimation.bind(this);\r\n         this.state = {\r\n            gridState : [],\r\n            cols : 50,\r\n            rows : 18,\r\n            start : [6 , 7],\r\n            end : [6 , 40],\r\n            myRefs : []\r\n         }\r\n         this.initialStart = this.state.start;\r\n         this.initialEnd = this.state.end;\r\n         this.initialState = this.state;\r\n      }\r\n      componentDidMount(){\r\n         this.intitalizeGrid();\r\n      }\r\n      clearBlocks = () =>{\r\n         this.clearAnimation(true);\r\n      }\r\n      clearPath = () =>{\r\n         this.clearAnimation(false);\r\n      }\r\n      clearAnimation = (isWall) =>{\r\n         \r\n        let refs = this.state.myRefs;\r\n        for(let i = 0 ; i < refs.length ; i++)\r\n        {\r\n           for(let j = 0 ; j < refs[i].length ; j++)\r\n           {\r\n              if(refs[i][j].classList.contains('animation_trigger')) refs[i][j].classList.remove('animation_trigger');\r\n              if(refs[i][j].classList.contains('color_path')) refs[i][j].classList.remove('color_path');\r\n            }\r\n        }\r\n       if(isWall) this.intitalizeGrid();\r\n      }\r\n      clickHandler = (e) => {\r\n         const start = e.target.getAttribute(\"row\");\r\n         const end = e.target.getAttribute(\"col\");\r\n         const startPos = this.state.start;\r\n         const endPos = this.state.end;\r\n         if(start == startPos[0] && end == startPos[1]) console.log(\"Clicked On Start Element\");\r\n         else if(start == endPos[0] && end == endPos[1]) console.log(\"Clicked on End Element\");\r\n         else console.log(\"Clicked to Create A wall\");\r\n      }\r\n     \r\n      intitalizeGrid(){\r\n         \r\n         let rows = this.state.rows;\r\n         let cols = this.state.cols;\r\n         let newGrid = [];\r\n         let refGrid = [];\r\n         for(let i = 0 ; i < rows ; i++){\r\n            newGrid.push(Array.from(Array(cols) , () => 0));\r\n            refGrid.push(Array.from(Array(cols) , () => 0));\r\n         }\r\n         \r\n         this.setState({\r\n            gridState : newGrid,\r\n            myRefs : refGrid\r\n         })\r\n         \r\n        \r\n      }\r\n      MouseDown = (e) =>{\r\n         \r\n         const start = Number(e.target.getAttribute(\"row\"));\r\n         const end = Number(e.target.getAttribute(\"col\"));\r\n         const startPos = this.state.start;\r\n         const endPos = this.state.end;\r\n         if(start == startPos[0] && end == startPos[1]) mouseClickedStart = true;\r\n         else if(start == endPos[0] && end == endPos[1]) mouseClickedEnd = true;\r\n         else {\r\n            console.log(\"Clicked to create a wall\");\r\n            let grid = this.state.gridState;\r\n            if(grid[start][end] == -1) grid[start][end] = 0;\r\n            else grid[start][end] = -1;\r\n            this.setState({\r\n               gridState : grid     \r\n            })\r\n            isWallClicked = true;\r\n         }\r\n\r\n      }\r\n      MouseMove = (e) =>{\r\n         if(mouseClickedStart)\r\n         {\r\n            const start = Number(e.target.getAttribute(\"row\"));\r\n            const end = Number(e.target.getAttribute(\"col\"));\r\n            const endNode = this.state.end;\r\n            if(endNode[0] != start || endNode[1] != end){\r\n            this.setState({\r\n               start : [start , end]\r\n            })\r\n         }\r\n            \r\n         }\r\n         if(mouseClickedEnd)\r\n         {\r\n            const start = Number(e.target.getAttribute(\"row\"));\r\n            const end =  Number(e.target.getAttribute(\"col\"));\r\n            const beginNode = this.state.start;\r\n            if(beginNode[0] != start || beginNode[1] != end){\r\n            this.setState({\r\n               end : [start , end]\r\n            })  \r\n            }\r\n         }\r\n         if(isWallClicked)\r\n         {\r\n            const start = Number(e.target.getAttribute(\"row\"));\r\n            const end =   Number(e.target.getAttribute(\"col\"));\r\n            let grid = this.state.gridState;\r\n            if((start != this.state.start[0] || end != this.state.start[1]) && (start!=this.state.end[0] || end!=this.state.end[1])){\r\n            grid[start][end] = -1;\r\n            this.setState({\r\n               gridState : grid     \r\n            })\r\n         }\r\n            console.log(\"Creating a wall\");\r\n         }\r\n      }\r\n      execute = (algo , speed , clearBoard , clearWall)=>{\r\n         \r\n         const grid = this.state.gridState;\r\n         const myRef = this.state.myRefs;\r\n         const start = this.state.start;\r\n         const end = this.state.end;\r\n         if(algo == \"Bfs\" || algo == \"Default\") Bfs(grid , start , end , myRef , speed);\r\n         if(algo == \"Dfs\") Dfs(grid , start , end , myRef , speed);\r\n         if(algo == \"Dijikstra\") Dijikstra(grid , start , end , myRef , speed);\r\n         if(algo == \"A*\") AStar(grid , start , end , myRef , speed);\r\n         \r\n      }\r\n      MouseUp = (e) =>{\r\n            if(mouseClickedStart) mouseClickedStart = false;\r\n            else if(mouseClickedEnd) mouseClickedEnd = false;\r\n            else {\r\n               console.log(\"Wall Creation ended\");\r\n               isWallClicked = false;\r\n            }\r\n      }\r\n      \r\n      render(){\r\n         const grid = this.state.gridState;\r\n         const myRef = this.state.myRefs;\r\n         const start = this.state.start;\r\n         const end = this.state.end;\r\n         \r\n       return(\r\n      <React.Fragment>\r\n         \r\n         <Header  execute = {this.execute} clearBlocks = {this.clearBlocks} clearAnimation = {this.clearAnimation} clearPath = {this.clearPath.bind(this)}/>\r\n         \r\n         <Description></Description>\r\n         \r\n         <div className = \"Info\"><b>Pick an Algorithm and hit visualise. The default running algorithm is Breadth First Search</b></div>\r\n         \r\n         <div className = \"Grid\">\r\n         <Square \r\n            grid = {this.state.gridState} \r\n            myRef = {this.state.myRefs}\r\n            rows = {this.state.rows} \r\n            cols = {this.state.cols} \r\n            clickHandler = {this.clickHandler} \r\n            moveHandler = {this.moveHandler} \r\n            start = {this.state.start} \r\n            end = {this.state.end}\r\n            MouseDown = {this.MouseDown}\r\n            MouseMove = {this.MouseMove}\r\n            MouseUp = {this.MouseUp}\r\n         />\r\n      </div>\r\n      </React.Fragment>\r\n      )}\r\n}\r\nexport default visualizer;","import React from 'react';\nimport './App.css';\nimport Visualizer from './Components/Visualiser/Visualiser'\n\nfunction App() {\n  return (\n    <div id = \"App\" className=\"App\">\n       <Visualizer></Visualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}